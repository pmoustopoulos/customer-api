spring:
  datasource:
    url: "${SPRING_DATASOURCE_URL:jdbc:h2:file:./data/customer-db;AUTO_SERVER=true}"
    username: "${SPRING_DATASOURCE_USERNAME:sa}"
    password: "${SPRING_DATASOURCE_PASSWORD:pass}"
    driver-class-name: org.h2.Driver
  jpa:
#    show-sql: true
    properties:
      hibernate:
        format_sql: true
    generate-ddl: true
    hibernate:
      ddl-auto: update
  h2:
    console:
      enabled: true


  # TODO: Production: configure your security provider. This example shows Azure Entra ID (Azure AD).
  # If you use another provider (Keycloak/Auth0/Okta), you can remove this block and add the appropriate config.
  security:
    oauth2:
      resourceserver:
        jwt:
          # TODO: Set AZURE_ISSUER_URI env var or replace the placeholder with your tenant issuer URI
          issuer-uri: "${AZURE_ISSUER_URI:https://login.microsoftonline.com/aaaaaaaaaaaaaaaaaaaaaaaaaaaaa/v2.0}"
  cloud:
    azure:
      active-directory:
        enabled: true
        profile:
          # TODO: Set AZURE_TENANT_ID env var or replace the placeholder below
          tenant-id: "${AZURE_TENANT_ID:aaaaaaaaaaaaaaaaaaaaaaaaaaaaa}"
        credential:
          # TODO: Set AZURE_CLIENT_ID env var or replace the placeholder below
          client-id: "${AZURE_CLIENT_ID:rrrrrrrrrrrrrrrrrrrrrrrrrrrrrr}"
          # TODO: Set AZURE_CLIENT_SECRET env var (keep it safe; use secrets, do not commit real secrets)
          client-secret: "${AZURE_CLIENT_SECRET:ddddddddddddddddddddddddddddddddddddd}"

